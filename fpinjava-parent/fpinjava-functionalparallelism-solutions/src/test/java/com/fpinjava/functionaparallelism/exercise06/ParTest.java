package com.fpinjava.functionaparallelism.exercise06;

import static org.junit.Assert.*;

import java.util.Random;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.junit.Test;

import com.fpinjava.common.Function;
import com.fpinjava.common.List;


public class ParTest {

  private static List<Integer> list = List.range(0, 2000);
  private static String expected = "[1998, 1994, 1996, 1986, 1988, 1992, 1990, 1970, 1972, 1976, 1974, 1984, 1982, 1978, 1980, 1938, 1940, 1944, 1942, 1952, 1950, 1946, 1948, 1968, 1966, 1962, 1964, 1954, 1956, 1960, 1958, 1876, 1880, 1878, 1888, 1886, 1882, 1884, 1904, 1902, 1898, 1900, 1890, 1892, 1896, 1894, 1936, 1934, 1930, 1932, 1922, 1924, 1928, 1926, 1906, 1908, 1912, 1910, 1920, 1918, 1914, 1916, 1750, 1752, 1756, 1754, 1764, 1762, 1758, 1760, 1780, 1778, 1774, 1776, 1766, 1768, 1772, 1770, 1810, 1806, 1808, 1798, 1800, 1804, 1802, 1782, 1784, 1788, 1786, 1796, 1794, 1790, 1792, 1874, 1872, 1868, 1870, 1860, 1862, 1866, 1864, 1844, 1846, 1850, 1848, 1858, 1856, 1852, 1854, 1812, 1814, 1818, 1816, 1826, 1824, 1820, 1822, 1842, 1840, 1836, 1838, 1828, 1830, 1834, 1832, 1500, 1502, 1506, 1504, 1514, 1512, 1508, 1510, 1530, 1528, 1524, 1526, 1516, 1518, 1522, 1520, 1560, 1556, 1558, 1548, 1550, 1554, 1552, 1532, 1534, 1538, 1536, 1546, 1544, 1540, 1542, 1624, 1622, 1618, 1620, 1610, 1612, 1616, 1614, 1594, 1596, 1600, 1598, 1608, 1606, 1602, 1604, 1562, 1564, 1568, 1566, 1576, 1574, 1570, 1572, 1592, 1590, 1586, 1588, 1578, 1580, 1584, 1582, 1748, 1744, 1746, 1736, 1738, 1742, 1740, 1720, 1722, 1726, 1724, 1734, 1732, 1728, 1730, 1688, 1690, 1694, 1692, 1702, 1700, 1696, 1698, 1718, 1716, 1712, 1714, 1704, 1706, 1710, 1708, 1626, 1630, 1628, 1638, 1636, 1632, 1634, 1654, 1652, 1648, 1650, 1640, 1642, 1646, 1644, 1686, 1684, 1680, 1682, 1672, 1674, 1678, 1676, 1656, 1658, 1662, 1660, 1670, 1668, 1664, 1666, 1000, 1002, 1006, 1004, 1014, 1012, 1008, 1010, 1030, 1028, 1024, 1026, 1016, 1018, 1022, 1020, 1060, 1056, 1058, 1048, 1050, 1054, 1052, 1032, 1034, 1038, 1036, 1046, 1044, 1040, 1042, 1124, 1122, 1118, 1120, 1110, 1112, 1116, 1114, 1094, 1096, 1100, 1098, 1108, 1106, 1102, 1104, 1062, 1064, 1068, 1066, 1076, 1074, 1070, 1072, 1092, 1090, 1086, 1088, 1078, 1080, 1084, 1082, 1248, 1244, 1246, 1236, 1238, 1242, 1240, 1220, 1222, 1226, 1224, 1234, 1232, 1228, 1230, 1188, 1190, 1194, 1192, 1202, 1200, 1196, 1198, 1218, 1216, 1212, 1214, 1204, 1206, 1210, 1208, 1126, 1130, 1128, 1138, 1136, 1132, 1134, 1154, 1152, 1148, 1150, 1140, 1142, 1146, 1144, 1186, 1184, 1180, 1182, 1172, 1174, 1178, 1176, 1156, 1158, 1162, 1160, 1170, 1168, 1164, 1166, 1498, 1494, 1496, 1486, 1488, 1492, 1490, 1470, 1472, 1476, 1474, 1484, 1482, 1478, 1480, 1438, 1440, 1444, 1442, 1452, 1450, 1446, 1448, 1468, 1466, 1462, 1464, 1454, 1456, 1460, 1458, 1376, 1380, 1378, 1388, 1386, 1382, 1384, 1404, 1402, 1398, 1400, 1390, 1392, 1396, 1394, 1436, 1434, 1430, 1432, 1422, 1424, 1428, 1426, 1406, 1408, 1412, 1410, 1420, 1418, 1414, 1416, 1250, 1252, 1256, 1254, 1264, 1262, 1258, 1260, 1280, 1278, 1274, 1276, 1266, 1268, 1272, 1270, 1310, 1306, 1308, 1298, 1300, 1304, 1302, 1282, 1284, 1288, 1286, 1296, 1294, 1290, 1292, 1374, 1372, 1368, 1370, 1360, 1362, 1366, 1364, 1344, 1346, 1350, 1348, 1358, 1356, 1352, 1354, 1312, 1314, 1318, 1316, 1326, 1324, 1320, 1322, 1342, 1340, 1336, 1338, 1328, 1330, 1334, 1332, 0, 2, 6, 4, 14, 12, 8, 10, 30, 28, 24, 26, 16, 18, 22, 20, 60, 56, 58, 48, 50, 54, 52, 32, 34, 38, 36, 46, 44, 40, 42, 124, 122, 118, 120, 110, 112, 116, 114, 94, 96, 100, 98, 108, 106, 102, 104, 62, 64, 68, 66, 76, 74, 70, 72, 92, 90, 86, 88, 78, 80, 84, 82, 248, 244, 246, 236, 238, 242, 240, 220, 222, 226, 224, 234, 232, 228, 230, 188, 190, 194, 192, 202, 200, 196, 198, 218, 216, 212, 214, 204, 206, 210, 208, 126, 130, 128, 138, 136, 132, 134, 154, 152, 148, 150, 140, 142, 146, 144, 186, 184, 180, 182, 172, 174, 178, 176, 156, 158, 162, 160, 170, 168, 164, 166, 498, 494, 496, 486, 488, 492, 490, 470, 472, 476, 474, 484, 482, 478, 480, 438, 440, 444, 442, 452, 450, 446, 448, 468, 466, 462, 464, 454, 456, 460, 458, 376, 380, 378, 388, 386, 382, 384, 404, 402, 398, 400, 390, 392, 396, 394, 436, 434, 430, 432, 422, 424, 428, 426, 406, 408, 412, 410, 420, 418, 414, 416, 250, 252, 256, 254, 264, 262, 258, 260, 280, 278, 274, 276, 266, 268, 272, 270, 310, 306, 308, 298, 300, 304, 302, 282, 284, 288, 286, 296, 294, 290, 292, 374, 372, 368, 370, 360, 362, 366, 364, 344, 346, 350, 348, 358, 356, 352, 354, 312, 314, 318, 316, 326, 324, 320, 322, 342, 340, 336, 338, 328, 330, 334, 332, 998, 994, 996, 986, 988, 992, 990, 970, 972, 976, 974, 984, 982, 978, 980, 938, 940, 944, 942, 952, 950, 946, 948, 968, 966, 962, 964, 954, 956, 960, 958, 876, 880, 878, 888, 886, 882, 884, 904, 902, 898, 900, 890, 892, 896, 894, 936, 934, 930, 932, 922, 924, 928, 926, 906, 908, 912, 910, 920, 918, 914, 916, 750, 752, 756, 754, 764, 762, 758, 760, 780, 778, 774, 776, 766, 768, 772, 770, 810, 806, 808, 798, 800, 804, 802, 782, 784, 788, 786, 796, 794, 790, 792, 874, 872, 868, 870, 860, 862, 866, 864, 844, 846, 850, 848, 858, 856, 852, 854, 812, 814, 818, 816, 826, 824, 820, 822, 842, 840, 836, 838, 828, 830, 834, 832, 500, 502, 506, 504, 514, 512, 508, 510, 530, 528, 524, 526, 516, 518, 522, 520, 560, 556, 558, 548, 550, 554, 552, 532, 534, 538, 536, 546, 544, 540, 542, 624, 622, 618, 620, 610, 612, 616, 614, 594, 596, 600, 598, 608, 606, 602, 604, 562, 564, 568, 566, 576, 574, 570, 572, 592, 590, 586, 588, 578, 580, 584, 582, 748, 744, 746, 736, 738, 742, 740, 720, 722, 726, 724, 734, 732, 728, 730, 688, 690, 694, 692, 702, 700, 696, 698, 718, 716, 712, 714, 704, 706, 710, 708, 626, 630, 628, 638, 636, 632, 634, 654, 652, 648, 650, 640, 642, 646, 644, 686, 684, 680, 682, 672, 674, 678, 676, 656, 658, 662, 660, 670, 668, 664, 666, NIL]";

  private Random random = new Random();
  /*
   * We should not test the resulting list order, because is may not be constant, due to parallelism.
   * So, we fold the list and test the result. Of course, this only works if the operation used for
   * folding is commutative.
   */
  @Test
  public void testParFilter() {
    ExecutorService s = Executors.newCachedThreadPool();
    Function<Integer, Boolean> f =  x -> {
      try {
        Thread.sleep(random.nextInt(1000 - 10) + 10L);
      } catch (InterruptedException e) {
        e.printStackTrace();
      }
      return x % 2 == 0;
    };
    try {
      assertEquals(Integer.valueOf(0), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.<Integer> list(), f)).get())).get());
      assertEquals(Integer.valueOf(0), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1), f)).get())).get());
      assertEquals(Integer.valueOf(2), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2), f)).get())).get());
      assertEquals(Integer.valueOf(2), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3), f)).get())).get());
      assertEquals(Integer.valueOf(6), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3, 4), f)).get())).get());
      assertEquals(Integer.valueOf(6), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3, 4, 5), f)).get())).get());
      assertEquals(Integer.valueOf(12), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3, 4, 5, 6), f)).get())).get());
      assertEquals(Integer.valueOf(12), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3, 4, 5, 6, 7), f)).get())).get());
      assertEquals(Integer.valueOf(20), Par.run(s, Par.sum(Par.run(s, Par.parFilter(List.list(1, 2, 3, 4, 5, 6, 7, 8), f)).get())).get());
      assertEquals(expected, Par.run(s, Par.parFilter(list, f)).get().toString());
    } catch (InterruptedException | ExecutionException e) {
      fail();
    }
  }

}
